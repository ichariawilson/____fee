// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.Fee.Services.Applying.Infrastructure;

namespace Applying.API.Infrastructure.Migrations
{
    [DbContext(typeof(ApplyingContext))]
    partial class ApplyingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.HasSequence("applicationitemseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("applicationseq", "applying")
                .IncrementsBy(10);

            modelBuilder.HasSequence("paymentseq", "applying")
                .IncrementsBy(10);

            modelBuilder.HasSequence("studentseq", "applying")
                .IncrementsBy(10);

            modelBuilder.Entity("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.ApplicationAggregate.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseHiLo("applicationseq", "applying");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("_applicationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ApplicationDate");

                    b.Property<int>("_applicationStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationStatusId");

                    b.Property<int?>("_paymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodId");

                    b.Property<int?>("_studentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("_applicationStatusId");

                    b.HasIndex("_paymentMethodId");

                    b.HasIndex("_studentId");

                    b.ToTable("applications", "applying");
                });

            modelBuilder.Entity("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.ApplicationAggregate.ApplicationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseHiLo("applicationitemseq");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("ScholarshipItemId")
                        .HasColumnType("int");

                    b.Property<string>("_pictureUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PictureUrl");

                    b.Property<string>("_scholarshipItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ScholarshipItemName");

                    b.Property<decimal>("_slotAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("SlotAmount");

                    b.Property<int>("_slots")
                        .HasColumnType("int")
                        .HasColumnName("Slots");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("applicationitems", "applying");
                });

            modelBuilder.Entity("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.ApplicationAggregate.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("applicationstatus", "applying");
                });

            modelBuilder.Entity("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.StudentAggregate.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseHiLo("paymentseq", "applying");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("_paymentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentTypeId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("_paymentTypeId");

                    b.ToTable("paymentmethods", "applying");
                });

            modelBuilder.Entity("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.StudentAggregate.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("paymenttypes", "applying");
                });

            modelBuilder.Entity("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.StudentAggregate.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseHiLo("studentseq", "applying");

                    b.Property<string>("IdentityGuid")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityGuid")
                        .IsUnique();

                    b.ToTable("students", "applying");
                });

            modelBuilder.Entity("Microsoft.Fee.Services.Applying.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("requests", "applying");
                });

            modelBuilder.Entity("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.ApplicationAggregate.Application", b =>
                {
                    b.HasOne("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.ApplicationAggregate.ApplicationStatus", "ApplicationStatus")
                        .WithMany()
                        .HasForeignKey("_applicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.StudentAggregate.PaymentMethod", null)
                        .WithMany()
                        .HasForeignKey("_paymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.StudentAggregate.Student", null)
                        .WithMany()
                        .HasForeignKey("_studentId");

                    b.OwnsOne("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.ApplicationAggregate.Profile", "Profile", b1 =>
                        {
                            b1.Property<int>("ApplicationId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseHiLo("applicationseq", "applying");

                            b1.Property<int>("GenderId")
                                .HasColumnType("int");

                            b1.Property<string>("IDNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("Request")
                                .HasColumnType("decimal(18,4)");

                            b1.HasKey("ApplicationId");

                            b1.ToTable("applications");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationId");
                        });

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.ApplicationAggregate.ApplicationItem", b =>
                {
                    b.HasOne("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.ApplicationAggregate.Application", null)
                        .WithMany("ApplicationItems")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.StudentAggregate.PaymentMethod", b =>
                {
                    b.HasOne("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.StudentAggregate.Student", null)
                        .WithMany("PaymentMethods")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.StudentAggregate.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("_paymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.ApplicationAggregate.Application", b =>
                {
                    b.Navigation("ApplicationItems");
                });

            modelBuilder.Entity("Microsoft.Fee.Services.Applying.Domain.AggregatesModel.StudentAggregate.Student", b =>
                {
                    b.Navigation("PaymentMethods");
                });
#pragma warning restore 612, 618
        }
    }
}
